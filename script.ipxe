#!ipxe

# Vars:
# These are PCI-SIG Device and Vendor IDs that define udev rules on-the-fly.
# The early udev rules allow developers and users to set expectations
# for a nodes state (e.g. interface names, and available hardware such as HSN).
set mgmt_vid0 15b3 # Mellanox
set mgmt_vid1 1077 # QLogic
#set mgmt_vid2 8086 # Intel
set hsn_did0 1017 # Mellanox CX-5
#set hsn_did1 1015 # Mellanox CX-4
set ignore ffff

set base-url http://pit/${hostname}
set image-name filesystem.squashfs
isset ${netX.dhcp/root-path} && set xname-param xname=${netX.dhcp/root-path} || set xname-param ''

# Non-Compute Node OverlayFS and Persistence.
set bootstrap metal.server=${base-url} metal.no-wipe=0 # TODO: Remove metal.no-wipe completely after MTL-1288 is fixed; apply ignorance.
set cloud-init ds=nocloud-net;s=http://${dhcp-server}:8888/;h=${hostname}
set boot-opts rootfallback=LABEL=BOOTRAID initrd=initrd.img.xz
set live-sqfs-opts root=live:LABEL=SQFSRAID rd.live.ram=0 rd.writable.fsimg=0 rd.skipfsck rd.live.squashimg=${image-name}
set live-oval-opts rd.live.overlay=LABEL=ROOTRAID rd.live.overlay.thin=1 rd.live.overlay.overlayfs=1
set disk-opts rd.luks rd.luks.crypttab=0 rd.lvm.conf=0 rd.lvm=1 rd.auto=1 rd.md=1 rd.dm=0 rd.neednet=0 rd.peerdns=0 rd.md.waitclean=1 rd.multipath=0 rd.md.conf=1

set ncn-params pcie_ports=native transparent_hugepage=never console=tty0 console=ttyS0,115200 iommu=pt ${bootstrap} ${cloud-init} ${boot-opts} ${live-sqfs-opts} ${live-oval-opts} ${disk-opts}
set net-ip-params rd.net.timeout.carrier=120 rd.net.timeout.ifup=120 rd.net.timeout.iflink=120 rd.net.dhcp.retry=3 rd.net.timeout.ipv6auto=0 rd.net.timeout.ipv6dad=0
set net-params rd.bootif=0 hostname=${hostname} ${net-ip-params}

# Parameters for CI/CD to ad-hoc replace (null by default):
# Good for "always-on" params for automation.
# sed -i '/robot-params .*/robot-params parm1 param2 param3' /var/www/boot/script.ipxe
set robot-params append

# Parameters for debugging kernel and initrd startup. These should
# only be enabled (uncommented) in developer environments.
set debug-params log_buf_len=1 rd.retry=10 rd.shell #rd.debug=1 metal.debug=1

# Custom parameters:
# Good for one-off changes/tests.
# example for a user or automation-toggle runs to replace on-the-fly:
# sed -i '/custom-params .*/custom-params parm1 param2 param3' /var/www/boot/script.ipxe
set custom-params nosplash quiet crashkernel=360M

:nic_naming
echo ====DEVICE NAMING=======================================================
## This creates udev rules for our bare minimum interfaces:
# - bond (LACP redundant bond)
# - hsn  (high-speed)
# - lan  (external/no-op)
# - mgmt (untagged/default-vlan)
# - sun  (storage vlan)
# ALL CONFIGURATION IS HANDLED BY CLOUD-INIT
# The values below must be set to their  defaults to allow the script to re-run on re-attempts.
set print-nics 0
set idx:int8 0
set idx_hsn:int8 0
set idx_mgmt:int8 0
set idx_sun:int8 0
set idx_lan:int8 0
set net-udev-params biosdevname=1
set net-hsn-udev-params
set net-lan-udev-params
set net-mgmt-udev-params
set net-sun-udev-params
set net-mgmt-single-bond-udev-params
set notice
set dual-bond 0
set odd 0

# main-loop
:loop isset ${net${idx}/mac} || goto loop_done

  # announce ...
  echo net${idx} MAC ${net${idx}/mac}

  # read PCI-SIG
  set device_id ${pci/${net${idx}/busloc}.2.2}
  set vendor_id ${pci/${net${idx}/busloc}.0.2}

  # bail if signature is unreadable (ffff)
  iseq ${device_id} ${ignore} && inc idx && goto loop ||

  # set indexes for scanning name preferences
  set mgmt_vididx:int8 0
  set hsn_dididx:int8 0

  # high-speed network interfaces
  :hsnloop isset ${hsn_did${hsn_dididx}} || goto hsnloop_done
    iseq ${device_id} ${hsn_did${hsn_dididx}} && goto hsn || inc hsn_dididx && goto hsnloop
  :hsnloop_done

  # mgmt and sun interfaces
  :mgmtloop isset ${mgmt_vid${mgmt_vididx}} || goto mgmtloop_done
    iseq ${vendor_id} ${mgmt_vid${mgmt_vididx}} && goto mgmt || inc mgmt_vididx && goto mgmtloop
  :mgmtloop_done

  # if not hsn nor mgmt/sun then classify as a lan and return to the top of loop
  goto lan ||
  inc idx && goto loop

# High-speed connections; provide the udev rules but no configuration
# HSN-config is handled up the stack.
:hsn
  echo net${idx} is hsn${idx_hsn}
  set net-hsn-udev-params ifname=hsn${idx_hsn}:${net${idx}/mac} ip=hsn${idx_hsn}:auto6 ${net-hsn-udev-params}
  inc idx && inc idx_hsn && goto loop

# bare interfaces used for bonds or stand-alones
:mgmt

  # Logic to setup redundant PCIe connections (Port1 of PCIe1 with Port1 of PCIe2 and so on and so forth)
  iseq mgmt0 mgmt${idx_mgmt} && set ipsrc dhcp || set ipsrc auto6
  # Set dual-bond now that we've maybe incremented idx_mgmt to 2.
  iseq mgmt2 mgmt${idx_mgmt} && set dual-bond 1 ||
  iseq mgmt2 mgmt${idx_mgmt} && clear notice || set notice (or mgmt1 on single-bond servers) 

  # Tell the kernel which MACs get sun or mgmt names.
  iseq ${odd} 1 && set net-sun-udev-params ifname=sun${idx_sun}:${net${idx}/mac} ip=sun${idx_sun}:auto6 ${net-sun-udev-params} && echo net${idx} is sun${idx_sun} ${notice} ||
  iseq ${odd} 1 && inc idx_sun ||
  iseq ${odd} 1 && iseq ${dual-bond} 0 && set net-mgmt-single-bond-udev-params ifname=mgmt${idx_mgmt}:${net${idx}/mac} ip=mgmt${idx_mgmt}:${ipsrc} ${net-mgmt-single-bond-udev-params} ||
  iseq ${odd} 0 && set net-mgmt-udev-params ifname=mgmt${idx_mgmt}:${net${idx}/mac} ip=mgmt${idx_mgmt}:${ipsrc} ${net-mgmt-udev-params} && echo net${idx} is mgmt${idx_mgmt} ||
  iseq ${odd} 0 && inc idx_mgmt ||

  # even or odd?
  iseq ${odd} 1 && set odd 0 || set odd 1

  # return
  inc idx && goto loop

# Stub connections that should be for external or site links.
:lan
  echo net${idx} is lan${idx_lan}
  # ip=:auto6 is necessary for dracut to invoke the interface, otherwise udev rules are not created.
  set net-lan-udev-params ifname=lan${idx_lan}:${net${idx}/mac} ip=lan${idx_lan}:auto6 ${net-lan-udev-params}
  inc idx && inc idx_lan && goto loop

:loop_done
# Assign bonds.
iseq ${dual-bond} 1 && set net-udev-params ${net-udev-params} ${net-hsn-udev-params} ${net-lan-udev-params} ${net-mgmt-udev-params} ${net-sun-udev-params} || set net-udev-params ${net-udev-params} ${net-hsn-udev-params} ${net-lan-udev-params} ${net-mgmt-udev-params} ${net-mgmt-single-bond-udev-params}
iseq ${dual-bond} 1 && echo Dual-Bond mode: Enabled (mgmt and sun NICs) || echo Dual-Bond mode: Disabled (mgmt NICs only)
iseq ${print-nics} 1 && prompt Press any key to continue || sleep 10

# Figure out if client is 64-bit capable
cpuid --ext 29 && set arch x86_64 || set arch x86
cpuid --ext 29 && set archb 64 || set archb 32
cpuid --ext 29 && set archl x86_64 || set archl i386
colour --basic 0 4
cpair --background 4 0
set menu-timeout 2000
:start
menu Metal Boot :: ${manufacturer} ${product} (${archb}bit)
item --gap -- ---------------- Boot Choices  ----------------
item --key b linux    (B)oot HPC Node
item --key r reboot   (R)eboot
item --key e exit     (E)xit to BIOS Menu
item
item --gap -- ---------------- Advanced configuration  ----------------
item --key a kedit    (A)ppend kernel parameters
item --key u nics     Print (u)dev rules for NIC naming
item --key i config   Configure / View (i)PXE settings
item --key s shell    (E)nter iPXE shell
item
choose --default linux --timeout ${menu-timeout} target || goto cancel ||
set menu-timeout 0
goto ${target}

:nics
# Clear everything; reset net-params, this will recalculate all the params anyway.
set print-nics 1
set net-udev-params biosdevname=1
clear net-hsn-udev-params
clear net-lan-udev-params
clear net-mgmt-udev-params
clear net-sun-udev-params
clear net-mgmt-single-bond-udev-params
goto nic_naming

:failed
echo Booting failed, dropping to shell
goto shell

:config
config
goto start

:kedit
echo Appending rd.cmdline=ask
set custom-params ${custom-params} rd.cmdline=ask
goto linux

:linux
initrd ${base-url}/initrd.img.xz
kernel --name kernel ${base-url}/kernel ${net-udev-params} ${ncn-params} ${net-params} ${robot-params} ${custom-params} ${debug-params} ${xname-param}
imgstat

echo
echo initramFS and kernel succesfully downloaded.
echo
echo Starting up...
boot || goto failed
goto start

:shell
echo Type 'exit' to get the back to the menu
shell
set menu-timeout 0
goto start

:exit
echo Exiting iPXE, loading BIOS...
exit

:cancel
echo Menu cancelled, dropping to iPXE shell..
goto shell
